name: Deploy Component

on:
  workflow_call:
    inputs:
      component_name:
        required: true
        type: string
      docker_repo_name:
        required: true
        type: string
      build_directory:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      build_args:
        required: false
        type: string
      dist_version_prefix:
        required: true
        type: string
    secrets:
      dockerhub_key:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.dockerhub_key }}

      - name: Generate Tag Version
        id: versioning
        run: |
          DATE_TAG=$(date +'%Y.%m.%d')
          BUILD_NUMBER="${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}"
          FULL_TAG="${{ inputs.dist_version_prefix }}-${DATE_TAG}-${BUILD_NUMBER}"
          echo "VERSION_TAG=${FULL_TAG}" >> $GITHUB_ENV
          echo "::set-output name=version_tag::$FULL_TAG"

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="${{ inputs.docker_repo_name }}:git-${{ github.sha }}"
          VERSIONED_IMAGE="${{ inputs.docker_repo_name }}:${{ steps.versioning.outputs.version_tag }}"
          
          cd "${{ inputs.build_directory }}" && \
          docker build --build-arg ${inputs.build_args} \
            -t "${IMAGE_NAME}" \
            -t "${VERSIONED_IMAGE}" \
            -f "${{ inputs.dockerfile_path }}" \
            .

          docker push "${IMAGE_NAME}"
          docker push "${VERSIONED_IMAGE}"

      - name: Create Tag in Repository
        uses: actions/github-script@v6
        with:
          script: |
            const versionTag = process.env.VERSION_TAG;
            github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${versionTag}`,
                sha: context.sha
            })
